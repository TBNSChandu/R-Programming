
getwd()
setwd(“C:/Users/cscha/OneDrive/Desktop/Software analytics”)
data1 <- read.csv("JDT.csv")
data2 <- read.csv("PDE.csv")
library(readr)
set.seed(450)
no_of_repetitions <- 30
data1_M1_r_squared <- numeric(no_of_repetitions)
data1_M2_r_squared <- numeric(no_of_repetitions)
data1_M3_r_squared <- numeric(no_of_repetitions)
for ( i in 1:no_of_repetitions){
training_indices <- sample(1:nrow(data1), nrow(data1) / 2)
training_data <- data1[training_indices, ]
testing_data <- data1[-training_indices, ]
data1_M1_model <- lm(bug ~ loc , data=training_data)
data1_M1_r_squared[i] <- summary(data1_M1_model)$r.squared
data1_M2_model <- lm(bug ~ bf , data=training_data)
data1_M2_r_squared[i] <- summary(data1_M2_model)$r.squared
data1_M3_model <- lm(bug ~ loc + bf , data=training_data)
data1_M3_r_squared[i] <- summary(data1_M3_model)$r.squared
}
t_test_data1_M1_model_M2_model <-  t.test(data1_M1_r_squared, data1_M2_r_squared, paired=TRUE)
t_test_data1_M1_model_M3_model <-  t.test(data1_M1_r_squared, data1_M3_r_squared, paired=TRUE)
t_test_data1_M2_model_M3_model <-  t.test(data1_M2_r_squared, data1_M3_r_squared, paired=TRUE)
print(t_test_data1_M1_model_M2_model)
print(t_test_data1_M1_model_M3_model)
print(t_test_data1_M2_model_M3_model)
print(summary(data1_M1_r_squared))
print(summary(data1_M1_model)$r.squared)
print(summary(data1_M3_r_squared))
print(summary(data1_M3_model)$r.squared)
print(summary(data1_M2_r_squared))
print(summary(data1_M2_model)$r.squared)
data1_M1_predictions <- predict(data1_M1_model, newdata = testing_data)
data1_M2_predictions <- predict(data1_M2_model, newdata = testing_data)
data1_M3_predictions <- predict(data1_M3_model, newdata = testing_data)
output_data <- data.frame(
real_bugs <- testing_data$bug,
M1_prediction = data1_M1_predictions,
M2_prediction = data1_M2_predictions,
M3_prediction = data1_M3_predictions
)
output_data <- output_data[order(-output_data$M1_prediction),]
data1_M1_top20 <- round(0.2*nrow(output_data))
data1_M1_total_bugs <- sum(output_data$real_bugs[1:data1_M1_top20])
output_data <- output_data[order(-output_data$M2_prediction),]
data1_M2_top20 <- round(0.2*nrow(output_data))
data1_M2_total_bugs <- sum(output_data$real_bugs[1:data1_M2_top20])
output_data <- output_data[order(-output_data$M3_prediction),]
data1_M3_top20 <- round(0.2*nrow(output_data))
data1_M3_total_bugs <- sum(output_data$real_bugs[1:data1_M3_top20])
print(data1_M1_total_bugs)
print(data1_M2_total_bugs)
print(data1_M3_total_bugs)
set.seed(450)
no_of_repetitions <- 30 
data2_M1_r_squared <- numeric(no_of_repetitions)
data2_M2_r_squared <- numeric(no_of_repetitions)
data2_M3_r_squared <- numeric(no_of_repetitions)
for ( i in 1:no_of_repetitions){
training_indices <- sample(1:nrow(data2), nrow(data2) / 2)
training_data <- data2[training_indices, ]
testing_data <- data2[-training_indices, ]
data2_M1_model <- lm (bug ~ loc , data=training_data)
data2_M1_r_squared[i] <- summary(data2_M1_model)$r.squared
data2_M2_model <- lm (bug ~ bf , data=training_data)
data2_M2_r_squared[i] <- summary(data2_M2_model)$r.squared
data2_M3_model <- lm (bug ~ loc + bf , data=training_data)
data2_M3_r_squared[i] <- summary(data2_M3_model)$r.squared
}
t_test_data2_M1_model_M2_model <-  t.test(data2_M1_r_squared, data2_M2_r_squared, paired=TRUE)
t_test_data2_M2_model_M3_model <-  t.test(data2_M2_r_squared, data2_M3_r_squared, paired=TRUE)
t_test_data2_M1_model_M3_model <-  t.test(data2_M1_r_squared, data2_M3_r_squared, paired=TRUE)
print(t_test_data2_M1_model_M2_model)
print(t_test_data2_M2_model_M3_model)
print(t_test_data2_M1_model_M3_model)
print(summary(data2_M1_r_squared))
print(summary(data2_M1_model)$r.squared)
print(summary(data2_M2_r_squared))
print(summary(data2_M2_model)$r.squared)
print(summary(data2_M3_r_squared))
print(summary(data2_M3_model)$r.squared)
data2_M1_predictions <- predict(data2_M1_model, newdata = testing_data)
data2_M2_predictions <- predict(data2_M2_model, newdata = testing_data)
data2_M3_predictions <- predict(data2_M3_model, newdata = testing_data)
output_data <- data.frame(
real_bugs <- testing_data$bug,
M1_prediction = data2_M1_predictions,
M2_prediction = data2_M2_predictions,
M3_prediction = data2_M3_predictions
)
output_data <- output_data[order(-output_data$M1_prediction),]
data2_M1_top20 <- round(0.2*nrow(output_data))
data2_M1_total_bugs <- sum(output_data$real_bugs[1:data2_M1_top20])
output_data <- output_data[order(-output_data$M2_prediction),]
data2_M2_top20 <- round(0.2*nrow(output_data))
data2_M2_total_bugs <- sum(output_data$real_bugs[1:data2_M2_top20])
output_data <- output_data[order(-output_data$M3_prediction),]
data2_M3_top20 <- round(0.2*nrow(output_data))
data2_M3_total_bugs <- sum(output_data$real_bugs[1:data2_M3_top20])
print(data2_M1_total_bugs)
print(data2_M2_total_bugs)
print(data2_M3_total_bugs)
library(readr)
library(dplyr)
set.seed(450)
no_of_repetitions <- 30
data1_to_data2_r_squared <- numeric(no_of_repetitions)
data2_to_data1_r_squared <- numeric(no_of_repetitions)
data1_to_data2_predictions <- numeric(no_of_repetitions)
data2_to_data1_predictions <- numeric(no_of_repetitions)
for (i in 1:no_of_repetitions) {
required_training_data <- sample_n(data1, nrow(data1) / 2)
required_testing_data <- sample_n(data2, nrow(data2) / 2)
M3_model_data1_to_data2 <- lm(bug ~ loc + bf, data = required_training_data)
predictions_data1_to_data2 <- predict(M3_model_data1_to_data2, newdata = required_testing_data)
r_squared_data1_to_data2 <- 1 - sum((required_testing_data$bug - predictions_data1_to_data2)^2) / sum((required_testing_data$bug - mean(required_testing_data$bug))^2)
required_testing_data <- required_testing_data %>% arrange(desc(predictions_data1_to_data2))
index_top_20_data2 <- round(0.2 * nrow(required_testing_data))
data_top_20_data2 <- head(required_testing_data, index_top_20_data2)
total_bugs_data1_to_data2 <- sum(data_top_20_data2$bug
data1_to_data2_r_squared[i] <- r_squared_data1_to_data2
data1_to_data2_predictions[i] <- total_bugs_data1_to_data2
resultant_training_data <- sample_n(data2, nrow(data2) / 2)
resultant_testing_data <- sample_n(data1, nrow(data1) / 2)
M3_model_data2_to_data1 <- lm(bug ~ loc + bf, data = resultant_training_data)
predictions_data2_to_data1 <- predict(M3_model_data2_to_data1, newdata = resultant_testing_data)
r_squared_data2_to_data1 <- 1 - sum((resultant_testing_data$bug - predictions_data2_to_data1)^2) / sum((resultant_testing_data$bug - mean(resultant_testing_data$bug))^2)
resultant_testing_data <- resultant_testing_data %>% arrange(desc(predictions_data2_to_data1))
index_top_20_data1 <- round(0.2 * nrow(resultant_testing_data))
data_top_20_data1 <- head(resultant_testing_data, index_top_20_data1)
total_bugs_data2_to_data1 <- sum(data_top_20_data1$bug)
data2_to_data1_r_squared[i] <- r_squared_data2_to_data1
data2_to_data1_predictions[i] <- total_bugs_data2_to_data1
}
mean_data1_to_data2_r_squared <- mean(data1_to_data2_r_squared)
mean_data2_to_data1_r_squared <- mean(data2_to_data1_r_squared)
mean_data1_to_data2_predictions <- mean(data1_to_data2_predictions)
mean_data2_to_data1_predictions <- mean(data2_to_data1_predictions)
print(mean_data1_to_data2_r_squared)
print(mean_data1_to_data2_predictions)
print(mean_data2_to_data1_r_squared)
print(mean_data2_to_data1_predictions)
t_test_r_sqaured <-  t.test(data1_to_data2_r_squared, data2_to_data1_r_squared, paired = TRUE)
t_test_predictions <-  t.test(data1_to_data2_predictions, data2_to_data1_predictions, paired = TRUE)
print(t_test_r_squared)
print(t_test_predictions)

savehistory("C:/Users/cscha/OneDrive/Desktop/Software analytics/Assignment7/Assignment7.Rhistory")
